观察模式：

    定义：定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，所有依赖他的对象都会得到通知并自定更新

    角色：
        1、被观察者：被观察者需要实现他的职责，必须能够到动态添加和删除观察者，一般为抽象类或者实现类
                   需要完成管理观察者和通知观察者
        2、观察者：观察者收到消息后，对消息做出动作和更新
        3、具体的被观察者：定义被观察者字节的业务逻辑，同时定义对哪些事件进行通知
        4、具体的观察者：每个观察者接收到消息后反应都是不一样的，各个观察者有自己的处理逻辑。

    优点：
        1、观察者和被观察者之间是抽象耦合，扩展非常容易
        2、建立一套触发机制：可以通过多层观察者和被观察者的结构来实现一个链条形式

    缺点：
        1、效率问题：如果一个观察者卡住了，整体效率很低，这时需要采用异步的方式
        2、多级触发的效率的时候需要多加考虑

    使用场景：
        1、关联行为场景，如广播收音机，文件系统，订阅发布模型
        2、事件多级触发场景
        3、跨系统消息交换场景，如消息队列

    注意事项：
        1、广播链问题：最好消息传递链不要超过两次，不然逻辑会非常复杂
        2、与责任链模式的区别：责任链模式的消息传递在传递过程是不会变的，或者是在原来的消息进行修正;
                            观察者模式是相邻的两个节点之间的消息协商结构

    使用案例：
        1、真实场景中一般消息传递的时候还会传递一个消息体（DTO），update方法一般有两个参数，消息体一般为JavaBean或者XML（远程传输）
        2、观察者的响应方式：多线程或者缓存技术