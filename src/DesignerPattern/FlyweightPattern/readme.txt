享元模式：

    定义：使用共享对象可有效地支持大量细粒度的对象（池技术）

        内部状态：可以共享的细节部分
        外部状态：不可共享的部分，作为一个标记，随环境改变（一般设为final）

    角色：
        1、抽象享元：即产品的抽象类，定义出对像的外部状态和内部状态的接口或实现
        2、具体享元：具体的一个产品类，实现抽象享元定义的业务，其内部状态应该与环境无关
        3、不可共享的享元：不存在外部状态或者安全要求不能使用共享技术的对象，该对象一般不会出现在享元工厂中
        4、享元工厂：构造一个池容器，同时提供从池中获得对象的方法。

     优点：
        1、降低程序内存占用，增强程序性能

     缺点：
        1、需要分离外部状态和内部状态，提高系统复杂性

     使用场景：
        1、系统中存在大量相似对像
        2、细粒度的对象的外部状态都较接近，而且外部状态与环境无关
        3、需要缓冲池的场景

     注意事项：
        1、多线程并发问题
        2、key的搜索速度，（即：外部状态在map的定位速度，最好都用基本类型。速度快，稳定）

