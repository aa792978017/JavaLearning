抽象工厂模式：

    定义：为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类

    优点：
        1、封装性：每个产品的实现不是高层模块要关心的，它只要关心接口即可
        2、产品族(汽车品牌)内的约束为非公开状态：向外屏蔽实现细节和约束
        3、产品级(汽车排量等级)扩展十分容易，只需要新增一个工厂类即可（横向扩展容易）

    缺点：
        1、产品族的扩展非常困难，需要修改大量代码，严重违反开闭原则（纵向扩展困难）

    适用场景：
        1、在清除产品族固定，而且只扩展产品级时，具有十分大的优势

    案例：
        优点体现：在我的案例中，如果给宝马和奔驰都研发了新的D3排量跑车,
                那么只需要新增BaoMaD3、BenChiD3,然后新增一个CarWorkShop即可

        缺点体现：如果公司又收购了法拉利,那么如果法拉利也有D1、D2、D3级跑车,
                那么这时候就需要新增AbstractFaLaLi、FaLaLiD1、D2、D3;
                并且！！！！,在已经写好的CarWorkShop里面加代码！！！！！这就违背了开闭原则

