桥梁模式：

    定义：将抽象和实现解藕，使得两者可以独立地变化（重点在于解藕，考虑拆分抽象和实现，把变化的因素封装到最小的逻辑单元中）

    角色：
        1、抽象化角色：定义出该角色的行为，同时保存一个对实现化角色的引用，该角色一般是抽象类---Corp
        2、实现化角色：是接口或者抽象类，定义角色必需的行为和属性---Product
        3、修正抽象化角色：它引用实现化角色对抽象化角色进行修正---HouseCorp
        4、具体实现化角色：实现接口和抽象类的方法和属性---IPod、House

    优点：
        1、抽象和实现分离：具体实现化对象替换时分灵活
        2、优秀的扩充能力：想增加增加具体实现化\修正抽象化角色，直接继承然后就可以添加即可
        3、实现细节对客户透明：面向抽象，具有很好的封装特性

    使用场景：
        1、不希望或不使用继承的场景
        2、接口或抽象类不稳定的场景
        3、重用性要求较高的场景