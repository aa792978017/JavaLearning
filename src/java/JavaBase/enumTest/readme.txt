范型：
    是什么：范型就是类型参数化，处理的数据类型可以是不固定的，作为参数传进来

    原理：通过擦除实现，编译后会被替换为Object类

    优点：更安全，编译时检查错误，确保不会用错类型
         更具可读性，显示指定了类型，提示程序员这里用的是什么类型

    思想：它将数据结构和算法与数据类型相分离，使得统一套数据结构和算法能够应用各种数据类型，而且可以保证类型安全（复用性更高）

    通配符形式：
        都是为了是接口更灵活，<? super E> 用于灵活写入或比较,可以使父类型的容器里可以写入子类，子类可以直接用父类的Comparable方法
        <?>,<? extends E>用于灵活读取，方法可以读取E或E的任意子类型的容器对象,这样使得通配付更加简单

    使用：
        1、通配符形式和类型参数形式是一样的，两者都能发挥同样的功能，
        2、通配符形式可以减少类型参数，形式上更好，可读性也更强
        3、但是如果类型参数有依赖关系，而且返回值依赖参数类型，或需要写操作，那么只能使用类型参数
        4、超类型通配符无法用参数类型代替

    注意事项：
        1、这些对象用getClass返回的都是同一个对象，
        2、判断对象的时候要用  box1 instanceof Box<String,String> 因为这个关键字是运行时比较
        3、不能通过不同的类型参数定义重载方法
        4、不能 T t = new T(); 不能T[] t = new T[],如果需要创建对象则传入 Class<T> type type.newInstance来构建对象
        5、不能创建范型数组

