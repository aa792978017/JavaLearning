状态模式：核心为封装

    定义：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类

    角色：
        1、抽象状态：接口或抽象类，负责定义状态，并且封装环境角色以实现状态切换
        2、具体状态：每一个具体状态必须完成两个职责：本状态的行为管理以及趋向状态处理，即：
                    本状态下要做的事情，以及本状态如何过渡到其他状态
        3、环境：定义客户端需要的接口，并且负责具体状态的切换（有两个不成文约束：状态对象声明为静态常量;具体执行使用委托方式）

    优点：
        1、结构清晰：避免了if else
        2、遵循设计原则：遵循了开闭原则和单一职责原则，增加状态就增加子类，修改状态就修改特定的类
        3、封装性好：外部不知道内部如何实现状态和状态的变换

    缺点：
        1、状态太多的时候，会出现类膨胀，状态类会特别多（状态最好不超过5个）

    使用场景：
        1、行为随状态改变而改变的场景（如果有顺序要求，可以结合建造者模式一起使用，封装性更好）
        2、条件分支判断语句的替代者
